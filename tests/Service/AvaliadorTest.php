<?php

namespace Alura\Leilao\Tests\Service;

use Alura\Leilao\Model\Lance;
use Alura\Leilao\Model\Leilao;
use Alura\Leilao\Model\Usuario;
use Alura\Leilao\Service\Avaliador;
use PHPUnit\Framework\TestCase;

class AvaliadorTest extends TestCase
{
    private $leiloeiro;


    protected function setUp(): void
    {
        $this->leiloeiro = new Avaliador();
    }


    //chama uma vez antes de criar os testes (usado principalmente para conexao ao banco
//    public static function setUpBeforeClass(): void
//    {
//        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
//    }


    /**
     * @dataProvider  entregaLeiloes
     */
    public function testAvaliadorDeveValidarOMaiorValorDoLance(Leilao $leilao)
    {
        // Arrange - Given
//        $leilao = $this->leilaoOrdemCrescente();
        // Act - When
        $this->leiloeiro->avalia($leilao);

        $maiorValor = $this->leiloeiro->getMaiorValor();
        // Assert - Then
        $this->assertEquals(3500, $maiorValor);
    }

    /**
     * @dataProvider entregaLeiloes
     *
     * @return void
     */
    public function testAvaliadorDevePegarUltimoLance(Leilao $leilao)
    {
        // Arrange - Given
//        $leilao = $this->leilaoOrdemCrescente();

        // Act - When
        $this->leiloeiro->avalia($leilao);

        $maiorValor = $this->leiloeiro->getMaiorValor();

        // Assert - Then
        $this->assertEquals(3500, $maiorValor);
    }

    public function testAvaliadorPega3ultimosLances()
    {
        $leilao = new Leilao('Fiat sla');
        $joao = new Usuario('joao');
        $maria = new Usuario('maria');
        $mario = new Usuario('mario');
        $jorge = new Usuario('jorge');

        $leilao->recebeLance(new Lance($joao, 1000));
        $leilao->recebeLance(new Lance($maria, 500));
        $leilao->recebeLance(new Lance($mario, 3400));
        $leilao->recebeLance(new Lance($jorge, 4400));
        $avaliador = new Avaliador();

        $avaliador->avalia($leilao);
        $maiores = $avaliador->getMaioresLances();
        $this->assertCount(3, $maiores);
        $this->assertEquals(4400, $maiores[0]->getValor());
        $this->assertEquals(3400, $maiores[1]->getValor());
        $this->assertEquals(1000, $maiores[2]->getValor());
    }

    public function leilaoOrdemCrescente()
    {
        $leilao = new Leilao('Fiat 147 0KM');

        $maria = new Usuario('Maria');
        $joao = new Usuario('João');
        $larissa = new Usuario('Larissa');

        $leilao->recebeLance(new Lance($joao, 2000));
        $leilao->recebeLance(new Lance($maria, 2500));
        $leilao->recebeLance(new Lance($larissa, 3500));
        return $leilao;
    }

    public function leilaoEmOrdemDecrescente()
    {
        $leilao = new Leilao('Fiat 147 0KM');

        $maria = new Usuario('Maria');
        $joao = new Usuario('João');
        $larissa = new Usuario('Larissa');

        $leilao->recebeLance(new Lance($larissa, 3500));
        $leilao->recebeLance(new Lance($maria, 2500));
        $leilao->recebeLance(new Lance($joao, 2000));

        return $leilao;
    }

    public function leilaoEmOrdemAleatoria()
    {
        $leilao = new Leilao('Fiat 147 0KM');

        $maria = new Usuario('Maria');
        $joao = new Usuario('João');
        $larissa = new Usuario('Larissa');

        $leilao->recebeLance(new Lance($maria, 2500));
        $leilao->recebeLance(new Lance($larissa, 3500));
        $leilao->recebeLance(new Lance($joao, 2000));
        return $leilao;
    }

    public function entregaLeiloes()
    {
        return [
            [$this->leilaoOrdemCrescente()],
            [$this->leilaoEmOrdemDecrescente()],
            [$this->leilaoEmOrdemAleatoria()],
        ];
    }
}
